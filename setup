#!/bin/bash -

# Source the script
. bashme/bashme

# Basic settings
loglevel=$LL_INFO
log2file=1
log2std=1

# Setup
PROGRAM_NAME="${BOLD}LFS Setup${RESET}"
VERSION="${FG_GREEN}v0.1${RESET}"
YEAR=2018
FULL_NAME="Raphael Emberger"
LICENCE=$(cat LICENSE)
EXPLANATION='A setup for my LFS.'
USAGE=()
define_opt '_help' '-h' '--help'    '' 'Display this help text.'
define_opt '_ver'  '-v' '--version' '' 'Display the VERSION.'
DESCRIPTION=''

# Parse arguments
parse_args "$@"

# Process options
[[ -n "$_help" ]] && print_usage && exit
[[ -n "$_ver" ]] && print_version && exit


# Setup traps
traps+=(
  QUIT
  WINCH
)
sig_err() {
  error "An error occurred."
  unlock
  tput rmcup
  exit;
}
sig_int() {
  error "I got interrupted."
  unlock
  tput rmcup
  exit;
}
sig_quit() {
  error "I got killed."
  unlock
  tput rmcup
  exit;
}
sig_winch() {
  debug "Resized terminal."
  update_winparams
  draw_ui
}
trap_signals

#lock
tput smcup
tput clear
function update_winparams() {
  declare -i COLS=$(tput cols)
  declare -i LINES=$(tput lines)
  debug "Updated \$COLS=$COLS and \$LINES=$LINES."
}
function print_title() {
  left=5
  top=2
  local title="$1"
  tput cup $top $left
  echo "${FG_YELLOW}${BOLD}${UNDERLINE}$1${RESET}"
  trace "Printed title: '$1' at ($top, $left)"
  top=$((top + 2))
  tput cup $top $left
}
function list_options() {
  local -i i
  local option
  for option in "$@"; do
    ((i++))
    tput cup $top $left
    echo "$i) $option"
    trace "Printed option number $i: '$option' at ($top, $left)"
    ((top++))
  done
}
function read_answer() {
  tput cup $top $left
  printf "$1"
  read $2
  ((top++))
  debug "Read answer: '$(eval 'echo \$$2')'"
}
# Start

update_winparams
declare -i left
declare -i top
print_title "LFS setup"
list_options "Download mandatory packages"
((top++))
read_answer "Enter option: " answer
trace "$LFS"
case "$answer" in
  1) # Download packages
    # if [[ "$EUID" -ne 0 ]]; then
    #   tput rmcup
    #   unlock
    #   fatal "This script has to be run as root."
    #   exit
    # fi
    if [[ -z "$LFS" ]]; then
      info "LFS variable not set."
      read_answer "Please specify the path for the LFS-variable: " LFS
    fi
    /bin/mkdir -p $LFS/sources
    if ! check_retval $?; then
      tput rmcup
      unlock
      error "Couldn't create LFS directory '$LFS/sources'."
      exit
    fi
    /bin/chmod a+wt $LFS/sources
    if ! check_retval $?; then
      tput rmcup
      unlock
      error "Couldn't make LFS directory writable and sticky."
      exit
    fi
    info 'Downloading packages and patches.'
    # wget --input-file=wget-list --continue --directory-prefix=$LFS/sources
    if ! check_retval $?; then
      error "Couldn't download all the packages."
      read
      tput rmcup
      unlock
      exit
    fi
    cp md5sums "$LFS/sources"
    pushd "$LFS/sources"
    md5sum -c md5sums
    if ! check_retval $?; then
      error "Couldn't verify all the packages."
      read
      tput rmcup
      unlock
      exit
    fi
    read
    popd
esac
read
# End
tput rmcup
unlock